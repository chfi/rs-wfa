/* automatically generated by rust-bindgen */

pub const BUFFER_SIZE_1K: u32 = 1024;
pub const BUFFER_SIZE_2K: u32 = 2048;
pub const BUFFER_SIZE_4K: u32 = 4096;
pub const BUFFER_SIZE_8K: u32 = 8192;
pub const BUFFER_SIZE_16K: u32 = 16384;
pub const BUFFER_SIZE_32K: u32 = 32768;
pub const BUFFER_SIZE_64K: u32 = 65536;
pub const BUFFER_SIZE_128K: u32 = 131072;
pub const BUFFER_SIZE_256K: u32 = 262144;
pub const BUFFER_SIZE_512K: u32 = 524288;
pub const BUFFER_SIZE_1M: u32 = 1048576;
pub const BUFFER_SIZE_2M: u32 = 2097152;
pub const BUFFER_SIZE_4M: u32 = 4194304;
pub const BUFFER_SIZE_8M: u32 = 8388608;
pub const BUFFER_SIZE_16M: u32 = 16777216;
pub const BUFFER_SIZE_32M: u32 = 33554432;
pub const BUFFER_SIZE_64M: u32 = 67108864;
pub const BUFFER_SIZE_128M: u32 = 134217728;
pub const BUFFER_SIZE_256M: u32 = 268435456;
pub const BUFFER_SIZE_512M: u32 = 536870912;
pub const BUFFER_SIZE_1G: u32 = 1073741824;
pub const BUFFER_SIZE_2G: u32 = 2147483648;
pub const BUFFER_SIZE_4G: u64 = 4294967296;
pub const BUFFER_SIZE_8G: u64 = 8589934592;
pub const BUFFER_SIZE_16G: u64 = 17179869184;
pub const BUFFER_SIZE_32G: u64 = 34359738368;
pub const BUFFER_SIZE_64G: u64 = 68719476736;
pub const BUFFER_SIZE_128G: u64 = 137438953472;
pub const BUFFER_SIZE_256G: u64 = 274877906944;
pub type size_t = ::std::os::raw::c_ulong;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct profiler_counter_t {
    pub total: u64,
    pub samples: u64,
    pub min: u64,
    pub max: u64,
    pub m_oldM: f64,
    pub m_newM: f64,
    pub m_oldS: f64,
    pub m_newS: f64,
}
#[test]
fn bindgen_test_layout_profiler_counter_t() {
    assert_eq!(
        ::std::mem::size_of::<profiler_counter_t>(),
        64usize,
        concat!("Size of: ", stringify!(profiler_counter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<profiler_counter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(profiler_counter_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_counter_t>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_counter_t),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_counter_t>())).samples as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_counter_t),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_counter_t>())).min as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_counter_t),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_counter_t>())).max as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_counter_t),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_counter_t>())).m_oldM as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_counter_t),
            "::",
            stringify!(m_oldM)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_counter_t>())).m_newM as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_counter_t),
            "::",
            stringify!(m_newM)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_counter_t>())).m_oldS as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_counter_t),
            "::",
            stringify!(m_oldS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_counter_t>())).m_newS as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_counter_t),
            "::",
            stringify!(m_newS)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct profiler_timer_t {
    pub begin_timer: timespec,
    pub time_ns: profiler_counter_t,
    pub accumulated: u64,
}
#[test]
fn bindgen_test_layout_profiler_timer_t() {
    assert_eq!(
        ::std::mem::size_of::<profiler_timer_t>(),
        88usize,
        concat!("Size of: ", stringify!(profiler_timer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<profiler_timer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(profiler_timer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_timer_t>())).begin_timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_timer_t),
            "::",
            stringify!(begin_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_timer_t>())).time_ns as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_timer_t),
            "::",
            stringify!(time_ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<profiler_timer_t>())).accumulated as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(profiler_timer_t),
            "::",
            stringify!(accumulated)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vector_t {
    pub memory: *mut ::std::os::raw::c_void,
    pub used: u64,
    pub element_size: u64,
    pub elements_allocated: u64,
}
#[test]
fn bindgen_test_layout_vector_t() {
    assert_eq!(
        ::std::mem::size_of::<vector_t>(),
        32usize,
        concat!("Size of: ", stringify!(vector_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vector_t>(),
        8usize,
        concat!("Alignment of ", stringify!(vector_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vector_t>())).memory as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vector_t),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vector_t>())).used as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vector_t),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vector_t>())).element_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vector_t),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vector_t>())).elements_allocated as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vector_t),
            "::",
            stringify!(elements_allocated)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_allocator_t {
    pub request_ticker: u64,
    pub segment_size: u64,
    pub segments: *mut vector_t,
    pub segments_free: *mut vector_t,
    pub current_segment_idx: u64,
    pub malloc_requests: *mut vector_t,
}
#[test]
fn bindgen_test_layout_mm_allocator_t() {
    assert_eq!(
        ::std::mem::size_of::<mm_allocator_t>(),
        48usize,
        concat!("Size of: ", stringify!(mm_allocator_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mm_allocator_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mm_allocator_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mm_allocator_t>())).request_ticker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mm_allocator_t),
            "::",
            stringify!(request_ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mm_allocator_t>())).segment_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mm_allocator_t),
            "::",
            stringify!(segment_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mm_allocator_t>())).segments as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mm_allocator_t),
            "::",
            stringify!(segments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mm_allocator_t>())).segments_free as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mm_allocator_t),
            "::",
            stringify!(segments_free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mm_allocator_t>())).current_segment_idx as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mm_allocator_t),
            "::",
            stringify!(current_segment_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mm_allocator_t>())).malloc_requests as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mm_allocator_t),
            "::",
            stringify!(malloc_requests)
        )
    );
}
extern "C" {
    pub fn mm_allocator_new(segment_size: u64) -> *mut mm_allocator_t;
}
extern "C" {
    pub fn mm_allocator_clear(mm_allocator: *mut mm_allocator_t);
}
extern "C" {
    pub fn mm_allocator_delete(mm_allocator: *mut mm_allocator_t);
}
extern "C" {
    pub fn mm_allocator_allocate(
        mm_allocator: *mut mm_allocator_t,
        num_bytes: u64,
        zero_mem: bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mm_allocator_free(
        mm_allocator: *mut mm_allocator_t,
        memory: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mm_allocator_get_occupation(
        mm_allocator: *mut mm_allocator_t,
        bytes_used: *mut u64,
        bytes_free_available: *mut u64,
        bytes_free_fragmented: *mut u64,
    );
}
extern "C" {
    pub fn mm_allocator_print(
        stream: *mut FILE,
        mm_allocator: *mut mm_allocator_t,
        display_requests: bool,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lineal_penalties_t {
    pub match_: ::std::os::raw::c_int,
    pub mismatch: ::std::os::raw::c_int,
    pub insertion: ::std::os::raw::c_int,
    pub deletion: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_lineal_penalties_t() {
    assert_eq!(
        ::std::mem::size_of::<lineal_penalties_t>(),
        16usize,
        concat!("Size of: ", stringify!(lineal_penalties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lineal_penalties_t>(),
        4usize,
        concat!("Alignment of ", stringify!(lineal_penalties_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lineal_penalties_t>())).match_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lineal_penalties_t),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lineal_penalties_t>())).mismatch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lineal_penalties_t),
            "::",
            stringify!(mismatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lineal_penalties_t>())).insertion as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lineal_penalties_t),
            "::",
            stringify!(insertion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lineal_penalties_t>())).deletion as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lineal_penalties_t),
            "::",
            stringify!(deletion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct affine_penalties_t {
    pub match_: ::std::os::raw::c_int,
    pub mismatch: ::std::os::raw::c_int,
    pub gap_opening: ::std::os::raw::c_int,
    pub gap_extension: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_affine_penalties_t() {
    assert_eq!(
        ::std::mem::size_of::<affine_penalties_t>(),
        16usize,
        concat!("Size of: ", stringify!(affine_penalties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<affine_penalties_t>(),
        4usize,
        concat!("Alignment of ", stringify!(affine_penalties_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_penalties_t>())).match_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_penalties_t),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_penalties_t>())).mismatch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_penalties_t),
            "::",
            stringify!(mismatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_penalties_t>())).gap_opening as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_penalties_t),
            "::",
            stringify!(gap_opening)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_penalties_t>())).gap_extension as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_penalties_t),
            "::",
            stringify!(gap_extension)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct edit_cigar_t {
    pub operations: *mut ::std::os::raw::c_char,
    pub max_operations: ::std::os::raw::c_int,
    pub begin_offset: ::std::os::raw::c_int,
    pub end_offset: ::std::os::raw::c_int,
    pub score: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_edit_cigar_t() {
    assert_eq!(
        ::std::mem::size_of::<edit_cigar_t>(),
        24usize,
        concat!("Size of: ", stringify!(edit_cigar_t))
    );
    assert_eq!(
        ::std::mem::align_of::<edit_cigar_t>(),
        8usize,
        concat!("Alignment of ", stringify!(edit_cigar_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edit_cigar_t>())).operations as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(edit_cigar_t),
            "::",
            stringify!(operations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edit_cigar_t>())).max_operations as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(edit_cigar_t),
            "::",
            stringify!(max_operations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edit_cigar_t>())).begin_offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(edit_cigar_t),
            "::",
            stringify!(begin_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edit_cigar_t>())).end_offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(edit_cigar_t),
            "::",
            stringify!(end_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edit_cigar_t>())).score as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(edit_cigar_t),
            "::",
            stringify!(score)
        )
    );
}
extern "C" {
    pub fn edit_cigar_allocate(
        edit_cigar: *mut edit_cigar_t,
        pattern_length: ::std::os::raw::c_int,
        text_length: ::std::os::raw::c_int,
        mm_allocator: *mut mm_allocator_t,
    );
}
extern "C" {
    pub fn edit_cigar_clear(edit_cigar: *mut edit_cigar_t);
}
extern "C" {
    pub fn edit_cigar_free(edit_cigar: *mut edit_cigar_t, mm_allocator: *mut mm_allocator_t);
}
extern "C" {
    pub fn edit_cigar_get_matches(edit_cigar: *mut edit_cigar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edit_cigar_add_mismatches(
        pattern: *mut ::std::os::raw::c_char,
        pattern_length: ::std::os::raw::c_int,
        text: *mut ::std::os::raw::c_char,
        text_length: ::std::os::raw::c_int,
        edit_cigar: *mut edit_cigar_t,
    );
}
extern "C" {
    pub fn edit_cigar_score_edit(edit_cigar: *mut edit_cigar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edit_cigar_score_gap_lineal(
        edit_cigar: *mut edit_cigar_t,
        penalties: *mut lineal_penalties_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edit_cigar_score_gap_affine(
        edit_cigar: *mut edit_cigar_t,
        penalties: *mut affine_penalties_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edit_cigar_cmp(
        edit_cigar_a: *mut edit_cigar_t,
        edit_cigar_b: *mut edit_cigar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edit_cigar_copy(edit_cigar_dst: *mut edit_cigar_t, edit_cigar_src: *mut edit_cigar_t);
}
extern "C" {
    pub fn edit_cigar_check_alignment(
        stream: *mut FILE,
        pattern: *const ::std::os::raw::c_char,
        pattern_length: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_length: ::std::os::raw::c_int,
        edit_cigar: *mut edit_cigar_t,
        verbose: bool,
    ) -> bool;
}
extern "C" {
    pub fn edit_cigar_print(stream: *mut FILE, edit_cigar: *mut edit_cigar_t);
}
extern "C" {
    pub fn edit_cigar_print_pretty(
        stream: *mut FILE,
        pattern: *const ::std::os::raw::c_char,
        pattern_length: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_length: ::std::os::raw::c_int,
        edit_cigar: *mut edit_cigar_t,
        mm_allocator: *mut mm_allocator_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct affine_cell_t {
    pub M: ::std::os::raw::c_int,
    pub I: ::std::os::raw::c_int,
    pub D: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_affine_cell_t() {
    assert_eq!(
        ::std::mem::size_of::<affine_cell_t>(),
        12usize,
        concat!("Size of: ", stringify!(affine_cell_t))
    );
    assert_eq!(
        ::std::mem::align_of::<affine_cell_t>(),
        4usize,
        concat!("Alignment of ", stringify!(affine_cell_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_cell_t>())).M as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_cell_t),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_cell_t>())).I as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_cell_t),
            "::",
            stringify!(I)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_cell_t>())).D as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_cell_t),
            "::",
            stringify!(D)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct affine_table_t {
    pub columns: *mut *mut affine_cell_t,
    pub num_rows: ::std::os::raw::c_int,
    pub num_columns: ::std::os::raw::c_int,
    pub edit_cigar: edit_cigar_t,
}
#[test]
fn bindgen_test_layout_affine_table_t() {
    assert_eq!(
        ::std::mem::size_of::<affine_table_t>(),
        40usize,
        concat!("Size of: ", stringify!(affine_table_t))
    );
    assert_eq!(
        ::std::mem::align_of::<affine_table_t>(),
        8usize,
        concat!("Alignment of ", stringify!(affine_table_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_table_t>())).columns as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_table_t),
            "::",
            stringify!(columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_table_t>())).num_rows as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_table_t),
            "::",
            stringify!(num_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_table_t>())).num_columns as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_table_t),
            "::",
            stringify!(num_columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_table_t>())).edit_cigar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_table_t),
            "::",
            stringify!(edit_cigar)
        )
    );
}
extern "C" {
    pub fn affine_table_allocate(
        table: *mut affine_table_t,
        pattern_length: ::std::os::raw::c_int,
        text_length: ::std::os::raw::c_int,
        mm_allocator: *mut mm_allocator_t,
    );
}
extern "C" {
    pub fn affine_table_free(table: *mut affine_table_t, mm_allocator: *mut mm_allocator_t);
}
extern "C" {
    pub fn affine_table_print(
        stream: *mut FILE,
        table: *const affine_table_t,
        pattern: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn affine_table_print_extended(
        stream: *mut FILE,
        table: *const affine_table_t,
        pattern: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    );
}
pub const wavefronts_penalties_strategy_wavefronts_penalties_match_zero:
    wavefronts_penalties_strategy = 0;
pub const wavefronts_penalties_strategy_wavefronts_penalties_force_zero_match:
    wavefronts_penalties_strategy = 1;
pub const wavefronts_penalties_strategy_wavefronts_penalties_shifted_penalties:
    wavefronts_penalties_strategy = 2;
pub const wavefronts_penalties_strategy_wavefronts_penalties_odd_pair_penalties:
    wavefronts_penalties_strategy = 3;
pub type wavefronts_penalties_strategy = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct affine_wavefronts_penalties_t {
    pub base_penalties: affine_penalties_t,
    pub wavefront_penalties: affine_penalties_t,
    pub penalties_strategy: wavefronts_penalties_strategy,
}
#[test]
fn bindgen_test_layout_affine_wavefronts_penalties_t() {
    assert_eq!(
        ::std::mem::size_of::<affine_wavefronts_penalties_t>(),
        36usize,
        concat!("Size of: ", stringify!(affine_wavefronts_penalties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<affine_wavefronts_penalties_t>(),
        4usize,
        concat!("Alignment of ", stringify!(affine_wavefronts_penalties_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_penalties_t>())).base_penalties as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_penalties_t),
            "::",
            stringify!(base_penalties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_penalties_t>())).wavefront_penalties
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_penalties_t),
            "::",
            stringify!(wavefront_penalties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_penalties_t>())).penalties_strategy as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_penalties_t),
            "::",
            stringify!(penalties_strategy)
        )
    );
}
extern "C" {
    pub fn affine_wavefronts_penalties_init(
        wavefronts_penalties: *mut affine_wavefronts_penalties_t,
        penalties: *mut affine_penalties_t,
        penalties_strategy: wavefronts_penalties_strategy,
    );
}
extern "C" {
    pub fn affine_penalties_mzero(
        base_penalties: *mut affine_penalties_t,
        shifted_penalties: *mut affine_penalties_t,
    );
}
extern "C" {
    pub fn affine_penalties_shift(
        base_penalties: *mut affine_penalties_t,
        shifted_penalties: *mut affine_penalties_t,
        pair_odd_heuristic: bool,
    );
}
pub const wavefront_reduction_type_wavefronts_reduction_none: wavefront_reduction_type = 0;
pub const wavefront_reduction_type_wavefronts_reduction_dynamic: wavefront_reduction_type = 1;
pub type wavefront_reduction_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct affine_wavefronts_reduction_t {
    pub reduction_strategy: wavefront_reduction_type,
    pub min_wavefront_length: ::std::os::raw::c_int,
    pub max_distance_threshold: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_affine_wavefronts_reduction_t() {
    assert_eq!(
        ::std::mem::size_of::<affine_wavefronts_reduction_t>(),
        12usize,
        concat!("Size of: ", stringify!(affine_wavefronts_reduction_t))
    );
    assert_eq!(
        ::std::mem::align_of::<affine_wavefronts_reduction_t>(),
        4usize,
        concat!("Alignment of ", stringify!(affine_wavefronts_reduction_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_reduction_t>())).reduction_strategy as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_reduction_t),
            "::",
            stringify!(reduction_strategy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_reduction_t>())).min_wavefront_length
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_reduction_t),
            "::",
            stringify!(min_wavefront_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_reduction_t>())).max_distance_threshold
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_reduction_t),
            "::",
            stringify!(max_distance_threshold)
        )
    );
}
extern "C" {
    pub fn affine_wavefronts_reduction_set_none(
        wavefronts_reduction: *mut affine_wavefronts_reduction_t,
    );
}
extern "C" {
    pub fn affine_wavefronts_reduction_set_dynamic(
        wavefronts_reduction: *mut affine_wavefronts_reduction_t,
        min_wavefront_length: ::std::os::raw::c_int,
        max_distance_threshold: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefronts_stats_t {
    pub wf_score: profiler_counter_t,
    pub wf_steps: profiler_counter_t,
    pub wf_steps_null: profiler_counter_t,
    pub wf_steps_extra: profiler_counter_t,
    pub wf_operations: profiler_counter_t,
    pub wf_extensions: profiler_counter_t,
    pub wf_reduction: profiler_counter_t,
    pub wf_reduced_cells: profiler_counter_t,
    pub wf_null_used: profiler_counter_t,
    pub wf_extend_inner_loop: profiler_counter_t,
    pub wf_compute_kernel: [profiler_counter_t; 4usize],
    pub wf_time_backtrace: profiler_timer_t,
    pub wf_backtrace_paths: profiler_counter_t,
    pub wf_backtrace_alg: profiler_counter_t,
}
#[test]
fn bindgen_test_layout_wavefronts_stats_t() {
    assert_eq!(
        ::std::mem::size_of::<wavefronts_stats_t>(),
        1112usize,
        concat!("Size of: ", stringify!(wavefronts_stats_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wavefronts_stats_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wavefronts_stats_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_score as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_score)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_steps as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_steps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_steps_null as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_steps_null)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_steps_extra as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_steps_extra)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_operations as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_operations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_extensions as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_reduction as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_reduction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_reduced_cells as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_reduced_cells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_null_used as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_null_used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_extend_inner_loop as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_extend_inner_loop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_compute_kernel as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_compute_kernel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_time_backtrace as *const _ as usize
        },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_time_backtrace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_backtrace_paths as *const _ as usize
        },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_backtrace_paths)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wavefronts_stats_t>())).wf_backtrace_alg as *const _ as usize
        },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(wavefronts_stats_t),
            "::",
            stringify!(wf_backtrace_alg)
        )
    );
}
pub type awf_offset_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct affine_wavefront_t {
    pub null: bool,
    pub lo: ::std::os::raw::c_int,
    pub hi: ::std::os::raw::c_int,
    pub lo_base: ::std::os::raw::c_int,
    pub hi_base: ::std::os::raw::c_int,
    pub offsets: *mut awf_offset_t,
}
#[test]
fn bindgen_test_layout_affine_wavefront_t() {
    assert_eq!(
        ::std::mem::size_of::<affine_wavefront_t>(),
        32usize,
        concat!("Size of: ", stringify!(affine_wavefront_t))
    );
    assert_eq!(
        ::std::mem::align_of::<affine_wavefront_t>(),
        8usize,
        concat!("Alignment of ", stringify!(affine_wavefront_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefront_t>())).null as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_t),
            "::",
            stringify!(null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefront_t>())).lo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_t),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefront_t>())).hi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_t),
            "::",
            stringify!(hi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefront_t>())).lo_base as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_t),
            "::",
            stringify!(lo_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefront_t>())).hi_base as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_t),
            "::",
            stringify!(hi_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefront_t>())).offsets as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_t),
            "::",
            stringify!(offsets)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct affine_wavefronts_t {
    pub pattern_length: ::std::os::raw::c_int,
    pub text_length: ::std::os::raw::c_int,
    pub num_wavefronts: ::std::os::raw::c_int,
    pub max_penalty: ::std::os::raw::c_int,
    pub max_k: ::std::os::raw::c_int,
    pub min_k: ::std::os::raw::c_int,
    pub mwavefronts: *mut *mut affine_wavefront_t,
    pub iwavefronts: *mut *mut affine_wavefront_t,
    pub dwavefronts: *mut *mut affine_wavefront_t,
    pub wavefront_null: affine_wavefront_t,
    pub reduction: affine_wavefronts_reduction_t,
    pub penalties: affine_wavefronts_penalties_t,
    pub edit_cigar: edit_cigar_t,
    pub mm_allocator: *mut mm_allocator_t,
    pub wavefronts_mem: *mut affine_wavefront_t,
    pub wavefronts_current: *mut affine_wavefront_t,
    pub wavefronts_stats: *mut wavefronts_stats_t,
}
#[test]
fn bindgen_test_layout_affine_wavefronts_t() {
    assert_eq!(
        ::std::mem::size_of::<affine_wavefronts_t>(),
        184usize,
        concat!("Size of: ", stringify!(affine_wavefronts_t))
    );
    assert_eq!(
        ::std::mem::align_of::<affine_wavefronts_t>(),
        8usize,
        concat!("Alignment of ", stringify!(affine_wavefronts_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_t>())).pattern_length as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(pattern_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefronts_t>())).text_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(text_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_t>())).num_wavefronts as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(num_wavefronts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefronts_t>())).max_penalty as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(max_penalty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefronts_t>())).max_k as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(max_k)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefronts_t>())).min_k as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(min_k)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefronts_t>())).mwavefronts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(mwavefronts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefronts_t>())).iwavefronts as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(iwavefronts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefronts_t>())).dwavefronts as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(dwavefronts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_t>())).wavefront_null as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(wavefront_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefronts_t>())).reduction as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(reduction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefronts_t>())).penalties as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(penalties)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<affine_wavefronts_t>())).edit_cigar as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(edit_cigar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_t>())).mm_allocator as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(mm_allocator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_t>())).wavefronts_mem as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(wavefronts_mem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_t>())).wavefronts_current as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(wavefronts_current)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefronts_t>())).wavefronts_stats as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefronts_t),
            "::",
            stringify!(wavefronts_stats)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct affine_wavefront_set {
    pub in_mwavefront_sub: *mut affine_wavefront_t,
    pub in_mwavefront_gap: *mut affine_wavefront_t,
    pub in_iwavefront_ext: *mut affine_wavefront_t,
    pub in_dwavefront_ext: *mut affine_wavefront_t,
    pub out_mwavefront: *mut affine_wavefront_t,
    pub out_iwavefront: *mut affine_wavefront_t,
    pub out_dwavefront: *mut affine_wavefront_t,
}
#[test]
fn bindgen_test_layout_affine_wavefront_set() {
    assert_eq!(
        ::std::mem::size_of::<affine_wavefront_set>(),
        56usize,
        concat!("Size of: ", stringify!(affine_wavefront_set))
    );
    assert_eq!(
        ::std::mem::align_of::<affine_wavefront_set>(),
        8usize,
        concat!("Alignment of ", stringify!(affine_wavefront_set))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefront_set>())).in_mwavefront_sub as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_set),
            "::",
            stringify!(in_mwavefront_sub)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefront_set>())).in_mwavefront_gap as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_set),
            "::",
            stringify!(in_mwavefront_gap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefront_set>())).in_iwavefront_ext as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_set),
            "::",
            stringify!(in_iwavefront_ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefront_set>())).in_dwavefront_ext as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_set),
            "::",
            stringify!(in_dwavefront_ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefront_set>())).out_mwavefront as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_set),
            "::",
            stringify!(out_mwavefront)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefront_set>())).out_iwavefront as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_set),
            "::",
            stringify!(out_iwavefront)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<affine_wavefront_set>())).out_dwavefront as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(affine_wavefront_set),
            "::",
            stringify!(out_dwavefront)
        )
    );
}
extern "C" {
    pub fn affine_wavefronts_clear(affine_wavefronts: *mut affine_wavefronts_t);
}
extern "C" {
    pub fn affine_wavefronts_delete(affine_wavefronts: *mut affine_wavefronts_t);
}
extern "C" {
    pub fn affine_wavefronts_new_complete(
        pattern_length: ::std::os::raw::c_int,
        text_length: ::std::os::raw::c_int,
        penalties: *mut affine_penalties_t,
        wavefronts_stats: *mut wavefronts_stats_t,
        mm_allocator: *mut mm_allocator_t,
    ) -> *mut affine_wavefronts_t;
}
extern "C" {
    pub fn affine_wavefronts_new_reduced(
        pattern_length: ::std::os::raw::c_int,
        text_length: ::std::os::raw::c_int,
        penalties: *mut affine_penalties_t,
        min_wavefront_length: ::std::os::raw::c_int,
        max_distance_threshold: ::std::os::raw::c_int,
        wavefronts_stats: *mut wavefronts_stats_t,
        mm_allocator: *mut mm_allocator_t,
    ) -> *mut affine_wavefronts_t;
}
extern "C" {
    pub fn affine_wavefronts_allocate_wavefront(
        affine_wavefronts: *mut affine_wavefronts_t,
        lo_base: ::std::os::raw::c_int,
        hi_base: ::std::os::raw::c_int,
    ) -> *mut affine_wavefront_t;
}
extern "C" {
    pub fn affine_wavefronts_align(
        affine_wavefronts: *mut affine_wavefronts_t,
        pattern: *const ::std::os::raw::c_char,
        pattern_length: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_length: ::std::os::raw::c_int,
    );
}
